@model List<MyToDo.Models.ToDoTask>
@using MyToDo.Enums

<!DOCTYPE html>
<html lang="en">
<link rel="stylesheet" href="path/to/font-awesome/css/font-awesome.min.css">
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My ToDo List</title>
    <style>
        /* Basic Reset */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            padding: 20px;
        }

        h1 {
            text-align: center;
            color: #4a90e2;
            margin-bottom: 20px;
        }

        .todo-list {
            max-width: 800px;
            margin: 0 auto;
            background: #ffffff;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .filterStatus {            
            margin: auto;
            max-width: 200px;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            align-content: center;
            margin-bottom: 8px;
        }

        .task {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px;
            border-bottom: 5px solid #ddd;
            transition: background-color 0.3s ease;
        }

        .task:last-child {
            border-bottom: none;
        }

        .task:hover {
            background-color: #f9f9f9;
        }

        .task-expired {
            background: #FAA0A0;
        }

        .task-details {
            display: flex;
            flex-direction: column;
            max-width: 50%;
        }

        .task-name {
            font-size: 1.2em;
            font-weight: bold;
            color: #333;
        }

        .task-description {
            font-size: 0.9em;
            color: #777;
        }

        .task-status-link {
            color: white;
            text-decoration: none;
            
        }

        .task-status {
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 0.9em;
        }

        /* Status Colors */
        .status-todo {
            background-color: #f39c12;
            color: white;
        }

        .status-inprogress {
            background-color: #3498db;
            color: white;
        }

        .status-done {
            background-color: #2ecc71;
            color: white;
        }

        .task-due {
            font-size: 0.9em;
            color: #555;
        }

        .btn {
            display: inline-block;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            background-color: #4a90e2;
            color: white;
            text-align: center;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s ease;
        }
        
        .btn:hover {
            background-color: #357ABD;
        }

        media screen and (max-width: 600px) {
            .task {
                flex-direction: column;
                align-items: flex-start;
            }

            .task-details {
                max-width: 100%;
            }

            .task-status {
                margin-top: 10px;
            }
        }
    </style>
</head>
<body>
    <h1>My ToDo List</h1>
    <div class="filterStatus">
        <form asp-action="Index" method="get">
            <input type="checkbox" id="IncludeToDo" name="status" value="@((byte)ToDoStates.ToDo)" @((ViewData["CurrentStatusFilters"] as List<byte>)?.Contains((byte)ToDoStates.ToDo) == true ? "checked" : "") />
            <label for="IncludeToDo">ToDo</label>
            <br />
            <input type="checkbox" id="IncludeInProgress" name="status" value="@((byte)ToDoStates.InProgress)" @((ViewData["CurrentStatusFilters"] as List<byte>)?.Contains((byte)ToDoStates.InProgress) == true ? "checked" : "") />
            <label for="IncludeInProgress">InProgress</label>
            <br />
            <input type="checkbox" id="IncludeDone" name="status" value="@((byte)ToDoStates.Done)" @((ViewData["CurrentStatusFilters"] as List<byte>)?.Contains((byte)ToDoStates.Done) == true ? "checked" : "")/>
            <label for="IncludeDone">Done</label>
            <br />
            <button type="submit">Filter</button>
        </form>
    </div>
    <div class="todo-list">
        @foreach (var task in Model)
        {
            <div class="task @(IsTaskExpired(task.DueDate, task.StatusCode))">
                <div class="task-details">
                    <span class="task-name">@task.Name</span>
                    <span class="task-description">@task.Description</span>
                </div>
                <div class="task-status @GetStatusClass((task.StatusCode))">
                    <a class="task-status-link" asp-action="ChangeStatus" asp-route-id="@task.Id">@Enum.GetName(typeof(ToDoStates), task.StatusCode)</a>
                </div>
                <div class="task-due">
                    Due: @task.DueDate
                </div>
                <div>
                    <a class="btn" asp-action="Edit" asp-route-id="@task.Id"><i class="fa fa-edit"></i></a>
                    <a class="btn" asp-action="Delete" asp-route-id="@task.Id"><i class="fa fa-trash"></i></a>
                </div>
                
            </div>
        }
    </div>

    <div style="text-align: center;">
        <a asp-action="Create" class="btn">Add New Task</a>
    </div>

    @functions {
        // Helper method to assign status class
        string GetStatusClass(byte? statusCode)
        {
            switch ((ToDoStates)statusCode)
            {
                case ToDoStates.ToDo:
                    return "status-todo";
                case ToDoStates.InProgress:
                    return "status-inprogress";
                case ToDoStates.Done:
                    return "status-done";
                default:
                    return "";
            }
        }

        string IsTaskExpired(DateOnly? dueDate, byte? statusCode)
        {            
            if ((dueDate < DateOnly.FromDateTime(DateTime.Now)) && (statusCode != (byte)ToDoStates.Done))
            {
                return "task-expired";
            }
            return "";
        }
    }
</body>
</html>
